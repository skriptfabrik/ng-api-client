/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.0.0+0fee254
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ClockifyWebhookRequest } from '../model/clockify-webhook-request';
// @ts-ignore
import { MOCOWebhookRequest } from '../model/moco-webhook-request';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface ExecuteClockifyWebhookRequestParams {
    clockifyHookId: string;
    /** Signing secret from webhook configuration */
    clockifySignature: string;
    /** Webhook event name */
    clockifyWebhookEventType: 'NEW_TIME_ENTRY' | 'TIME_ENTRY_UPDATED' | 'TIMER_STOPPED' | 'TIME_ENTRY_DELETED';
    /** Execute Clockify Webhook Request */
    clockifyWebhookRequest?: ClockifyWebhookRequest;
}

export interface ExecuteMocoWebhookRequestParams {
    mocoHookId: string;
    /** The subdomain for the account */
    xMocoAccountUrl: string;
    /** The name of the event that has been occured */
    xMocoEvent: 'create' | 'update' | 'delete' | 'archive';
    /** The signature representing a checksum of the request */
    xMocoSignature: string;
    /** The target resource of the event */
    xMocoTarget: 'Company' | 'Project' | 'Task' | 'User';
    /** The timestamp of the event, it is not guaranteed that Webhooks are triggered in order */
    xMocoTimestamp: number;
    /** The user ID that triggered this hook */
    xMocoUserId: number;
    /** Execute MOCO Webhook Request */
    mOCOWebhookRequest?: MOCOWebhookRequest;
}


@Injectable({
  providedIn: 'root'
})
export class WebhooksService {

    protected basePath = 'https://www.skriptfabrik.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Execute Clockify Webhook
     * Executes a Clockify Webhook.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeClockifyWebhook(requestParameters: ExecuteClockifyWebhookRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public executeClockifyWebhook(requestParameters: ExecuteClockifyWebhookRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public executeClockifyWebhook(requestParameters: ExecuteClockifyWebhookRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public executeClockifyWebhook(requestParameters: ExecuteClockifyWebhookRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        const clockifyHookId = requestParameters.clockifyHookId;
        if (clockifyHookId === null || clockifyHookId === undefined) {
            throw new Error('Required parameter clockifyHookId was null or undefined when calling executeClockifyWebhook.');
        }
        const clockifySignature = requestParameters.clockifySignature;
        if (clockifySignature === null || clockifySignature === undefined) {
            throw new Error('Required parameter clockifySignature was null or undefined when calling executeClockifyWebhook.');
        }
        const clockifyWebhookEventType = requestParameters.clockifyWebhookEventType;
        if (clockifyWebhookEventType === null || clockifyWebhookEventType === undefined) {
            throw new Error('Required parameter clockifyWebhookEventType was null or undefined when calling executeClockifyWebhook.');
        }
        const clockifyWebhookRequest = requestParameters.clockifyWebhookRequest;

        let localVarHeaders = this.defaultHeaders;
        if (clockifySignature !== undefined && clockifySignature !== null) {
            localVarHeaders = localVarHeaders.set('clockify-signature', String(clockifySignature));
        }
        if (clockifyWebhookEventType !== undefined && clockifyWebhookEventType !== null) {
            localVarHeaders = localVarHeaders.set('clockify-webhook-event-type', String(clockifyWebhookEventType));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/webhooks/clockify/${this.configuration.encodeParam({name: "clockifyHookId", value: clockifyHookId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: clockifyWebhookRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Execute MOCO Webhook
     * Executes a [MOCO Webhook](https://github.com/hundertzehn/mocoapp-api-docs/blob/master/README.md#webhooks).
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeMocoWebhook(requestParameters: ExecuteMocoWebhookRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public executeMocoWebhook(requestParameters: ExecuteMocoWebhookRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public executeMocoWebhook(requestParameters: ExecuteMocoWebhookRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public executeMocoWebhook(requestParameters: ExecuteMocoWebhookRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        const mocoHookId = requestParameters.mocoHookId;
        if (mocoHookId === null || mocoHookId === undefined) {
            throw new Error('Required parameter mocoHookId was null or undefined when calling executeMocoWebhook.');
        }
        const xMocoAccountUrl = requestParameters.xMocoAccountUrl;
        if (xMocoAccountUrl === null || xMocoAccountUrl === undefined) {
            throw new Error('Required parameter xMocoAccountUrl was null or undefined when calling executeMocoWebhook.');
        }
        const xMocoEvent = requestParameters.xMocoEvent;
        if (xMocoEvent === null || xMocoEvent === undefined) {
            throw new Error('Required parameter xMocoEvent was null or undefined when calling executeMocoWebhook.');
        }
        const xMocoSignature = requestParameters.xMocoSignature;
        if (xMocoSignature === null || xMocoSignature === undefined) {
            throw new Error('Required parameter xMocoSignature was null or undefined when calling executeMocoWebhook.');
        }
        const xMocoTarget = requestParameters.xMocoTarget;
        if (xMocoTarget === null || xMocoTarget === undefined) {
            throw new Error('Required parameter xMocoTarget was null or undefined when calling executeMocoWebhook.');
        }
        const xMocoTimestamp = requestParameters.xMocoTimestamp;
        if (xMocoTimestamp === null || xMocoTimestamp === undefined) {
            throw new Error('Required parameter xMocoTimestamp was null or undefined when calling executeMocoWebhook.');
        }
        const xMocoUserId = requestParameters.xMocoUserId;
        if (xMocoUserId === null || xMocoUserId === undefined) {
            throw new Error('Required parameter xMocoUserId was null or undefined when calling executeMocoWebhook.');
        }
        const mOCOWebhookRequest = requestParameters.mOCOWebhookRequest;

        let localVarHeaders = this.defaultHeaders;
        if (xMocoAccountUrl !== undefined && xMocoAccountUrl !== null) {
            localVarHeaders = localVarHeaders.set('x-moco-account-url', String(xMocoAccountUrl));
        }
        if (xMocoEvent !== undefined && xMocoEvent !== null) {
            localVarHeaders = localVarHeaders.set('x-moco-event', String(xMocoEvent));
        }
        if (xMocoSignature !== undefined && xMocoSignature !== null) {
            localVarHeaders = localVarHeaders.set('x-moco-signature', String(xMocoSignature));
        }
        if (xMocoTarget !== undefined && xMocoTarget !== null) {
            localVarHeaders = localVarHeaders.set('x-moco-target', String(xMocoTarget));
        }
        if (xMocoTimestamp !== undefined && xMocoTimestamp !== null) {
            localVarHeaders = localVarHeaders.set('x-moco-timestamp', String(xMocoTimestamp));
        }
        if (xMocoUserId !== undefined && xMocoUserId !== null) {
            localVarHeaders = localVarHeaders.set('x-moco-user-id', String(xMocoUserId));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/webhooks/moco/${this.configuration.encodeParam({name: "mocoHookId", value: mocoHookId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: mOCOWebhookRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
